name: Notify WhatsApp on Push

on:
  push:
    branches:
      - '**'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Send WhatsApp notification via Gowa
        uses: actions/github-script@v7
        env:
          GOWA_BASE_URL: ${{ secrets.GOWA_BASE_URL }}
          GOWA_SEND_PATH: ${{ secrets.GOWA_SEND_PATH }}
          WA_USER: ${{ secrets.WA_USER }}
          WA_PASSWORD: ${{ secrets.WA_PASSWORD }}
          WA_TARGET_NUMBER: ${{ secrets.WA_TARGET_NUMBER }}
          WA_EXTRA_NUMBERS: ${{ secrets.WA_EXTRA_NUMBERS }}
        with:
          script: |
            // 'core' and 'context' are provided by actions/github-script v7
            const baseRaw = process.env.GOWA_BASE_URL || '';
            const base = baseRaw.replace(/\/+$/,'');
            if (!base) {
              core.setFailed('Missing GOWA_BASE_URL (set it in repository secrets)');
              return;
            }

            const user = process.env.WA_USER || '';
            const pass = process.env.WA_PASSWORD || '';
            if (!user || !pass) {
              core.setFailed('Missing WA_USER/WA_PASSWORD (set them in repository secrets)');
              return;
            }

            // Parse recipients from WA_TARGET_NUMBER and WA_EXTRA_NUMBERS (comma/space/newline separated)
            const parseNumbers = (s) => (s || '').split(/[\s,\n]+/).map(v => v.trim()).filter(Boolean);
            const primaryRaw = process.env.WA_TARGET_NUMBER || '';
            const extraRaw = process.env.WA_EXTRA_NUMBERS || '';
            const phones = Array.from(new Set([...parseNumbers(primaryRaw), ...parseNumbers(extraRaw)]));
            if (phones.length === 0) {
              // Fallback if nothing configured (keeps backward compatibility)
              phones.push('5511932300536');
            }
            core.info(`Recipients: ${phones.join(', ')}`);

            const repo = `${context.repo.owner}/${context.repo.repo}`;
            const ref = (context.ref || '').replace('refs/heads/','');
            const commits = context.payload.commits || [];
            const head = context.payload.head_commit || commits[commits.length - 1] || {};
            const sha = head.id || context.sha || '';
            const shortSha = sha.substring(0, 7);
            const commitUrl = `https://github.com/${repo}/commit/${sha}`;
            const compareUrl = context.payload.compare || `https://github.com/${repo}/compare/${context.payload.before}...${context.payload.after}`;

            // Aggregate changed files across all commits in this push
            const changed = new Set();
            for (const c of commits) {
              (c.added || []).forEach(f => changed.add(`A ${f}`));
              (c.modified || []).forEach(f => changed.add(`M ${f}`));
              (c.removed || []).forEach(f => changed.add(`D ${f}`));
            }
            const changedList = Array.from(changed);
            const maxFilesToShow = 30;
            const shownFiles = changedList.slice(0, maxFilesToShow);
            const filesSection = shownFiles.length
              ? `\nArquivos alterados (${changedList.length}):\n- ${shownFiles.join('\n- ')}${changedList.length > maxFilesToShow ? `\n... e mais ${changedList.length - maxFilesToShow} arquivos` : ''}`
              : '';

            const author = (head.author && (head.author.name || head.author.username)) || (head.committer && (head.committer.name || head.committer.username)) || 'desconhecido';
            const message = (head.message || '').trim() || '(sem mensagem)';

            const body = [
              `Novo commit em ${repo} (${ref})`,
              `SHA: ${shortSha}`,
              `Autor: ${author}`,
              `Mensagem:`,
              message,
              filesSection,
              `Link do commit: ${commitUrl}`,
              `Compare: ${compareUrl}`
            ].filter(Boolean).join('\n');

            const auth = Buffer.from(`${user}:${pass}`).toString('base64');
            const headers = {
              'Authorization': `Basic ${auth}`,
              'Content-Type': 'application/json'
            };

            // Optional explicit path override
            const overridePath = (process.env.GOWA_SEND_PATH || '').trim();

            // Candidate endpoints for common GOWA deployments (base path included in GOWA_BASE_URL if any)
            const endpointsToTry = overridePath ? [overridePath] : [
              '/send/message/text',
              '/send/text',
              '/send/message',
              '/send',
              '/message/text',
              '/messages/send',
              '/api/send',
              '/api/sendText'
            ];

            // Candidate payload shapes used by different forks/versions
            const payloadVariants = [
              { label: 'phone+message', make: (phone) => ({ phone, message: body }) },
              { label: 'to+message',    make: (phone) => ({ to: phone, message: body }) },
              { label: 'number+text',   make: (phone) => ({ number: phone, text: body }) },
              { label: 'chatId+text',   make: (phone) => ({ chatId: `${phone}@c.us`, text: body }) }
            ];

            // Small preflight to help diagnose base path issues
            try {
              const pre = await fetch(`${base}/app/login`, { method: 'GET', headers: { 'Authorization': `Basic ${auth}` } });
              core.info(`Preflight GET ${base}/app/login -> ${pre.status}`);
            } catch (e) {
              core.warning(`Preflight request failed: ${e.message}`);
            }

            let allOk = true;
            const failures = [];

            for (const phone of phones) {
              let sent = false;
              let lastStatus = 0, lastText = '', lastTried = '';
              for (const path of endpointsToTry) {
                const url = `${base}${path.startsWith('/') ? '' : '/'}${path}`;
                for (const variant of payloadVariants) {
                  const payload = variant.make(phone);
                  core.info(`Trying ${url} -> ${phone} with payload=${variant.label} ...`);
                  try {
                    const res = await fetch(url, { method: 'POST', headers, body: JSON.stringify(payload) });
                    const text = await res.text();
                    lastStatus = res.status; lastText = text; lastTried = `${url} :: ${variant.label}`;
                    core.info(`Response ${res.status}: ${text.slice(0, 300)}`);
                    if (res.ok) {
                      core.info(`WhatsApp notification sent to ${phone} via ${url} using ${variant.label}`);
                      sent = true;
                      break;
                    }
                    if (res.status === 401 || res.status === 403) {
                      core.warning('Authentication failed (401/403). Check WA_USER/WA_PASSWORD and Basic Auth settings on the server.');
                    }
                    if (res.status === 404) {
                      core.info('Endpoint not found (404). If your server uses a base path (e.g. /gowa), ensure GOWA_BASE_URL includes it, or set GOWA_SEND_PATH to the exact endpoint.');
                    }
                  } catch (err) {
                    core.warning(`Request error for ${url}: ${err.message}`);
                  }
                }
                if (sent) break;
              }
              if (!sent) {
                allOk = false;
                failures.push({ phone, lastStatus, lastTried, lastText: lastText.slice(0, 500) });
              }
            }

            if (!allOk) {
              core.setFailed(`Failed to send to some recipients: ${JSON.stringify(failures)}`);
            } else {
              core.info(`WhatsApp notification sent successfully to all recipients: ${phones.join(', ')}`);
            }