name: Notify WhatsApp on Push

on:
  push:
    branches:
      - '**'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Send WhatsApp notification via Gowa
        uses: actions/github-script@v7
        env:
          GOWA_BASE_URL: ${{ secrets.GOWA_BASE_URL }}
          WA_USER: ${{ secrets.WA_USER }}
          WA_PASSWORD: ${{ secrets.WA_PASSWORD }}
          WA_TARGET_NUMBER: ${{ secrets.WA_TARGET_NUMBER }}
        with:
          script: |
            const core = require('@actions/core');
            const { context } = require('@actions/github');

            const baseRaw = process.env.GOWA_BASE_URL || '';
            const base = baseRaw.replace(/\/+$/,'');
            if (!base) {
              core.setFailed('Missing GOWA_BASE_URL (set it in repository secrets)');
              return;
            }

            const user = process.env.WA_USER || '';
            const pass = process.env.WA_PASSWORD || '';
            if (!user || !pass) {
              core.setFailed('Missing WA_USER/WA_PASSWORD (set them in repository secrets)');
              return;
            }

            const phone = (process.env.WA_TARGET_NUMBER && process.env.WA_TARGET_NUMBER.trim()) || '5511932300536';

            const repo = `${context.repo.owner}/${context.repo.repo}`;
            const ref = (context.ref || '').replace('refs/heads/','');
            const commits = context.payload.commits || [];
            const head = context.payload.head_commit || commits[commits.length - 1] || {};
            const sha = head.id || context.sha || '';
            const shortSha = sha.substring(0, 7);
            const commitUrl = `https://github.com/${repo}/commit/${sha}`;
            const compareUrl = context.payload.compare || `https://github.com/${repo}/compare/${context.payload.before}...${context.payload.after}`;

            // Aggregate changed files across all commits in this push
            const changed = new Set();
            for (const c of commits) {
              (c.added || []).forEach(f => changed.add(`A ${f}`));
              (c.modified || []).forEach(f => changed.add(`M ${f}`));
              (c.removed || []).forEach(f => changed.add(`D ${f}`));
            }
            const changedList = Array.from(changed);
            const maxFilesToShow = 30;
            const shownFiles = changedList.slice(0, maxFilesToShow);
            const filesSection = shownFiles.length
              ? `\nArquivos alterados (${changedList.length}):\n- ${shownFiles.join('\n- ')}${changedList.length > maxFilesToShow ? `\n... e mais ${changedList.length - maxFilesToShow} arquivos` : ''}`
              : '';

            const author = (head.author && (head.author.name || head.author.username)) || (head.committer && (head.committer.name || head.committer.username)) || 'desconhecido';
            const message = (head.message || '').trim() || '(sem mensagem)';

            const body = [
              `Novo commit em ${repo} (${ref})`,
              `SHA: ${shortSha}`,
              `Autor: ${author}`,
              `Mensagem:`,
              message,
              filesSection,
              `Link do commit: ${commitUrl}`,
              `Compare: ${compareUrl}`
            ].filter(Boolean).join('\n');

            const auth = Buffer.from(`${user}:${pass}`).toString('base64');
            const headers = {
              'Authorization': `Basic ${auth}`,
              'Content-Type': 'application/json'
            };

            const payload = { phone, message: body };

            const endpointsToTry = ['/send', '/messages/send', '/message/text', '/api/send'];
            let lastStatus = 0, lastText = '';
            for (const path of endpointsToTry) {
              const url = `${base}${path}`;
              core.info(`Trying ${url} ...`);
              try {
                const res = await fetch(url, { method: 'POST', headers, body: JSON.stringify(payload) });
                lastStatus = res.status;
                lastText = await res.text();
                core.info(`Response ${res.status}: ${lastText.slice(0, 300)}`);
                if (res.ok) {
                  core.info(`WhatsApp notification sent to ${phone} via ${path}`);
                  return;
                }
              } catch (err) {
                core.warning(`Request error for ${url}: ${err.message}`);
              }
            }
            core.setFailed(`Failed to send WhatsApp notification. Last status=${lastStatus}, body=${lastText.slice(0, 500)}`);